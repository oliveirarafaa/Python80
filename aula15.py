# -*- coding: utf-8 -*-
"""aula15

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EilEM76HtX6sjK5VVNNxWmvhrcJz3IBC

## EXEMPLOS try, except, finally;
"""

text = 'Hello World'
text2 = input()
try:
    print(text, text2)
except:
    print('Ocorreu um erro!')
finally:
    print('Poxa não vai funcionar')

try:
    number = int(input('>>>'))
    number2 = int(input('>>>'))
    div = number / number2
    print(div)
except ZeroDivisionError as error:
    print('A DIVISÃO NÃO PODE SER POR ZERO')
except ValueError as error:
    print(error)
except:
    print(error)
else:
    print('Resultado:', div)

"""# Exercícios"""

# Exercício 1 : Peça ao usuário para inserir um número e manipule a exceção caso ele insira algo que não seja um número inteiro.

try:
    num1 = int(input('>>>'))
    print('O número digitado foi:', num1)
except ValueError:
    print('ERROR! Digite um numero inteiro!')

# Exercício 2: Peça ao usuário para inserir dois números e realize uma operação de divisão. Manipule a exceção caso ocorra um erro na operação  -  ZeroDivisionError.

try:
    num1 = int(input('>>>'))
    num2 = int(input('>>>'))
    divisao = num1 / num2
except ZeroDivisionError as error22:
    print('Não pode usar ZERO como divisor!')
except ValueError:
    print('ERROR! Digite um número inteiro!')
except:
    print(error)
else:
    print('Resultado:', divisao)

# Exercício 3: Crie uma função que aceite uma lista e um índice como entrada e retorne o elemento naquele índice. Manipule a exceção caso o índice seja inválido(caso imprima um indice que não exista na lista).

def function():
    lista = [100,5000,350,333,21,7]
    try:
        num = int(input('>>>'))
        indice = lista[num]
        print(indice)
    except IndexError as error:
        print('ERRO!')
function()

# Exercício 4: Crie uma função que divida dois números e manipule a exceção caso digite uma letra no divisor.

def function():
    try:
        num1 = float(input('>>>'))
        num2 = float(input('>>>'))
        div = num1 / num2
        print(div)
    except ValueError:
        print('ERROR! DIGITE UM NÚMERO!')
    else:
        print('Resultado:', div)

function()

# criação da classe
class Car:
    def __init__ (self):
        self.color = 'red'
        self.marca = 'Mistubish'
        self.velocidade = '200 km'

    def display(self):
        print(f'A marca do carro é: {self.marca}')

    def km2(self):
            print(f'A velocidade é: {self.velocidade}')

# filho 1 da classe -> objeto 1
car = Car()

# método
car.display()

# filho 2 da classe  -> objeto 2
car.km2()

# Você é um(a) Desenvolvedor(a) da empresa x,
# seu gestor solicitou um sistema:

# crie um form que cadastre usuarios
# mostrar os dados da usuario
# verificar se ela é maior de idade

# A empresa utiliza por padrão POO

class Form:
    print('Olá, bem vindo(a)!')
    def __init__ (self):
        self.nome = input('Nome: ')
        self.idade = int(input('Idade: '))
        self.data_nasc = input('Data de nascimento: ')
        self.cpf = input('CPF: ')
        self.email = input('Email: ')

        print('--------------------------------------------')

    def dados(self):

        print(f'Nome: {self.nome}')
        print(f'Idade: {self.idade}')
        print(f'Data de nascimento: {self.data_nasc}')
        print(f'CPF: {self.cpf}')
        print(f'Email: {self.email}')

    def idade1(self):
          if self.idade >= 18:
              print('Você é maior de idade!')
          else:
              print('Você é menor de idade!')


form = Form()
form.dados()
form.idade1()

# 1: Crie uma classe chamada Cachorro com um atributo nome e um método latir que imprima "Woof!" quando chamado. Em seguida, crie um objeto da classe Cachorro e chame o método latir.

class Cachorro:
    def __init__ (self, nome):
        self.nome = nome

    def latir(self):
        print('Woof!')
        print(f'Sou o {self.nome}!')

cachorro1 = Cachorro("Marley")
cachorro1.latir()

# 2: Crie uma classe chamada Retangulo com atributos largura e altura. Adicione um método chamado calcular_area que retorna a área do retângulo.

class Retangulo:
    def __init__(self):
        self.largura = 18
        self.altura = 30

    def calcular_area(self):
        calc = self.largura * self.altura
        print(f'A área do retangulo é: {calc}')


retangulo = Retangulo()
retangulo.calcular_area()

# 3: Crie uma classe chamada Carro com um atributo chamado velocidade (inicialmente 0). Em seguida, adicione um método chamado acelerar que aumenta a velocidade em 5 unidades.

class Carro:
    def __init__(self, velocidade):
        self.velocidade = velocidade

    def acelerar(self):
        acelerar = 0
        for i in range(25):
            acelerar = acelerar + 5
            print(acelerar)

    # def acelerar(self):
    #     for n in range(self.velocidade, 100, 5):
    #         print('Acelerando: ', n)
    #         if n == 95:
    #             print('A celerou no máximo')

velocidade = 0
carro = Carro(velocidade)
carro.acelerar()

# 4: Crie uma classe chamada Gato que herda da classe Cachorro do exercício anterior.O método latir da classe Cachorro deve ser substituído por um método miar na classe Gato que imprime "Miau!".

class Gato(Cachorro):

      def miar():
        print('Miau')

gato = Gato()
gato.miar()
gato.latir()